#let spnset = "spaninng set"
#let ref = "row-echelon form"
#let wrt = "with resepct to"
#let box2 = box
#let speca = "specific heat capcity"
#let heca = "heat capcity"
#let ene = "energy"
#let diff = "difference"
#let diffs = "differences"
#let tempe = "temperature"
#let tempes = "temperatures"
#let deri = "derivative"
#let deris = "derivatives"
#let vars = "variables"
#let var = "variable"
#let cord = "coordinate"
#let cords = "coordinates"
#let contra = "contradiction"
#let contras = "contradiction"
#let eival = "eigenvalue"
#let eivt = "eigenvector"
#let eivals = "eigenvalues"
#let eivts = "eigenvectors"
#let supp = "suppose"
#let Supp = "Suppose"
#let hypo = "hypothesis"
#let magflux = "magentic flux"
#let cw = "clockwise"
#let ccw = "counterclockwise"
#let moi = "moment of inertia"
#let com = "center of mass"
#let cog = "center of gravity"
#let elpoten = "elastic potential energy"
#let poten = "potential energy"
#let grapoten = "gravitational potential energy"
#let gren = "gravitational energy"
#let magfield = "magnetic field"
#let magfields = "magnetic fields"
#let inj = "injective"
#let surj = "surjective"
#let bij = "bijective"
#let cayham = "Cayley-Hamilton theorem"
#let charpol = "characteristic polynomial"
#let pol = "polynomial"
#let pols = "polynomials"
#let pst = "Problem Solving Tactics"
#let putnam = "Putnam and Beyond"
#let ela = "Essential Linear Algebra"
#let upmp = "University Physics with Modern Physics"
#let tao1 = "Analysis I"
#let tao2 = "Analysis II"
#let hrk4 = "Physics, 4th Edition"
#let hrk5 = "Physics, 5th Edition"
#let egmo = "Euclidean Geometry in Mathematical Olymipads"
#let pss = "Problem Solving Strategies"
#let liog = "Lemmas in Olympiad Geometry"
#let irodov1 = "Problems in General Physics"
#let irodov2 = "Fundamental Laws of Mechanics"
#let irodov3 = "Basic Laws of Magnetism"
#let cacc = "Calculus: A Complete Course"
#let napkin = "An Infinite Napkin"
#let morin1 = "Introduction to Classical Mechanics with Problems and Solutions"
#let purcell = "Electricity and Magnetism"
#let psim = "Problems and Solutions in Introductory Mechanics"
#let probmorin = "Probability for the Enthusiastic Beginner"
#let hrk4 = "Physics, 4th Edition"
#let hrk5 = "Physics, 5th Edition"
#let hrw10 = "Fundamentals of Physics, 10th Edition"
#let ladr = "Linear Algebra Done Right"
#let stewart = "Calculus: Early Transcendentals"
#let ineq = "inequality"
#let Ineq = "Inequality"
#let eq = "equality"
#let eqs = "equalities"
#let Eq = "Equality"
#let Eqs = "Equalities"
#let ineqs = "inequalities"
#let ineqs = "Inequalities"
#let cauchy = "Cauchy-Schwarz inequality"
#let rein = "rearragnement inequality"
#let jensen = "Jensen's inequality"
#let sati = "satisfying"
#let amgm = "AM-GM inequality"
#let dia = "diagonal"
#let adia = "antidiagonal"
#let mt = "matrix"
#let mts = "matrices"
#let difable = "differerentiable"
#let inble = "invertible"
#let sol = "solution"
#let unsol = "unique solution"
#let trivsol = "trivial solution"
#let sols = "solutions"
#let unsols = "unique solutions"
#let linsys = "linear system"
#let trivsols = "trivial solutions"
#let poly = "polynomial"
#let polys = "polynomials"
#let kronpro = "Kronecker product"
#let orth = "orthogonal"
#let sym = "symmetric"
#let sksym = "skew-symmetric"
#let ansym = "antisymmetric"
#let perm = "permutation"
#let perms = "permutations"
#let permt = "permutation matrix"
#let permts = "permutation matrices"
#let uptri = "upper-triangular"
#let lowtri = "lower-triangular"
#let iff = "if and only if"
#let WLOG = "Without loss of generality"
#let wlog = "without loss of generality"
#let rhs = "right hand side"
#let lhs = "left hand side"
#let vt = "vector"
#let vts = "vectors"
#let vsp = "vector space"
#let vsps = "vector spaces"
#let sbsp = "subspace"
#let disum = "direct sum"
#let disums = "direct sums"
#let Lincom = "Linear combination"
#let Lincoms = "Linear combinations"
#let fn = "function"
#let fns = "functions"
#let comu = "commutative"
#let asso = "associative"
#let comut = "commutativity"
#let assot = "associativity"
#let lincom = "linear combination"
#let lincoms = "linear combinations"
#let indep = "linearly independent"
#let dep = "linearly dependent"
#let Indep = "Linearly independent"
#let ba = "basis"
#let Dep = "Linearly dependent"
#let defi = "definition"
#let ax = "axiom"
#let the = "theorem"
#let lem = "lemma"
#let Fn = "Function"
#let Fns = "Functions"
#let pro = "proposition"
#let proj = "projection"
#let Pro = "Proposition"
#let Defi = "Definition"
#let Ax = "Axiom"
#let The = "Theorem"
#let Lem = "Lemma"
#let sset = "subset"
#let ssets = "subsets"
#let un = "union"
#let scamu = "scalar multiplication"
#let scam = "scalar multiple"
#let scams = "scalar multiples"
#let sbsps = "subspaces"
#let Sbsps = "Subspaces"
#let Sbsp = "Subspace"
#let adid = "additive identity"
#let posi = "positive"
#let nega = "negative"
#let adi = "addition"
#let muli = "multiplication"
#let lid = "linear dependence lemma"
#let dime = "dimension"
#let Dime = "Dimension"
#let findem = "finite-dimensional"
#let indem = "infinite-dimensional"
#let int = "integer"
#let Fibo = "Fibonacci"
#let isect = "intersect"
#let istion = "intersection"
#let isects = "intersects"
#let istions = "intersections"
#let tri = "triangle"
#let tris = "triangles"
#let Tri = "Triangle"
#let Tris = "Triangles"
#let st = "such that"
#let mp = "midpoint"
#let radax = "radical axis"
#let circir = "circumcircle"
#let cirrad = "circumradius"
#let quadi = "quadilateral"
#let quadis = "quadilaterals"
#let cyc4 = "cyclic quadilateral"
#let cyc4s = "cyclic quadilaterals"
#let Cyc4 = "Cyclic quadilateral"
#let Cyc4s = "Cyclic quadilaterals"
#let dne = "does not exist"
#let dnes = "do not exist"
#let cont = "continuous"
#let discont = "discontinuous"
#let conty = "continuity"
#let disconty = "discontinuity"
#let Cont = "Continuous"
#let Discont = "discontinuous"
#let Conty = "Continuity"
#let Disconty = "Discontinuity"
#let orcen = "orthocenter"
#let Orcen = "Orthocenter"
#let incen = "incenter"
#let Incen = "Incenter"
#let excen = "excenter"
#let Excen = "Excenter"
#let colin = "colinear"
#let limp = "linear map"
#let limps = "linear maps"
#let lintran = "linear transformation"
#let lin = "linear"
#let lintrans = "linear transformations"
#let diran = "directed angle"
#let dirans = "directed angles"
#let resp = "respectively"
#let drn = "direction"
#let drns = "directions"
#let eqns = "equations"
#let eqn = "equation"
#let pos = "position"
#let Pos = "Position"
#let poss = "positions"
#let Poss = "Positions"
#let coeff = "coefficient"
#let coeffs = "coefficients"
#let cosf = "coefficient of static friction"
#let acel = "acceleration"
#let acels = "accelerations"
#let wet = "work-energy theorem"
#let ppn = "perpendicular"
#let ppns = "perpendiculars"
#let dimal = "dimensional"
#let EMWs = "electromagnetic waves"
#let EMW = "electromagnetic wave"
#let emg = "electromagnetic"

// Other commands